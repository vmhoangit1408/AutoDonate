let pageurl = window.location.href;
let id = "";
let message = document.createElement('span');
let afterElement = null;
var service_value=0;
String.prototype.isNumber = function(){return /^\d+$/.test(this);}
var recaptchaCallbackAlreadyFired=false;
var auto_submit=false;
var auto_click=false;

function checkCompletion_captchaguru(code, key, repeat) {
    let url = `http://api.captcha.guru/res.php?key=${key}&action=get&id=${code}&json=0`;
    chrome.runtime.sendMessage({
        method: 'GET',
        action: 'xhttp',
        url: url,
        data: ''
    }, function(responseText) {
        if(responseText.includes("CAPCHA_NOT_READY")){
            setTimeout(function() {
                checkCompletion_captchaguru(code, key, repeat);
            }, repeat)
        }else{
            //////console.log(responseText.substring(3));
            setCaptchaCode(responseText.substring(3));
        }


    });

}

function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
        results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
}
function insertAfter(el, referenceNode) {
    referenceNode.parentNode.insertBefore(el, referenceNode);
}
function setChecked(interval){
    let check = document.createElement("img");
    check.src = chrome.extension.getURL("./icons/check.png");
    check.style.marginTop = "15px";
    check.style.marginLeft = "5px";
    check.style.position = "absolute";
    insertAfter(check, afterElement);
}
function setCaptchaCode(code) {
    let ele = document.getElementsByClassName("g-recaptcha-response")[0];
    //////console.log(ele);
    sendMessage("<b>XONG</b>");
    setChecked();

    if(ele != null){
        ele.innerHTML = code;        
        bitir(code);

        if(auto_submit==true)
        {
            afterElement.closest('form').submit();
        }
    }
}

function bitir(code)
{
    var taskSolution=code;
    var injectedCode = "(" + function(taskSolution) {
        var recaptchaCallbackAlreadyFired = false;

        var recursiveCallbackSearch = function(object, solution, currentDepth, maxDepth) {
            if (recaptchaCallbackAlreadyFired) {
                return
            }
            var passedProperties = 0;
            for (var i in object) {
                passedProperties++;
                if (passedProperties > 15) {
                    break
                }
                try {
                    if (typeof object[i] == "object" && currentDepth <= maxDepth) {
                        recursiveCallbackSearch(object[i], solution, currentDepth + 1, maxDepth)
                    } else if (i == "callback") {
                        if (typeof object[i] == "function") {
                            recaptchaCallbackAlreadyFired = true;
                            object[i](solution)
                        } else if (typeof object[i] == "string" && typeof window[object[i]] == "function") {
                            recaptchaCallbackAlreadyFired = true;
                            window[object[i]](solution)
                        }
                        return
                    }
                } catch (e) {}
            }
        };

        if (!recaptchaCallbackAlreadyFired) {
            if (typeof ___grecaptcha_cfg != "undefined" && typeof ___grecaptcha_cfg.clients != "undefined") {
                var oneVisibleRecaptchaClientKey = null;
                visible_recaptcha_element_search_loop: for (var i in ___grecaptcha_cfg.clients) {
                    for (var j in ___grecaptcha_cfg.clients[i]) {
                        if (___grecaptcha_cfg.clients[i][j] && typeof ___grecaptcha_cfg.clients[i][j].nodeName == "string" && typeof ___grecaptcha_cfg.clients[i][j].innerHTML == "string" && typeof ___grecaptcha_cfg.clients[i][j].innerHTML.indexOf("iframe") != -1) {
                            if (___grecaptcha_cfg.clients[i][j].offsetHeight != 0 || ___grecaptcha_cfg.clients[i][j].childNodes.length && ___grecaptcha_cfg.clients[i][j].childNodes[0].offsetHeight != 0 || ___grecaptcha_cfg.clients[i][j].dataset.size == "invisible") {
                                if (oneVisibleRecaptchaClientKey === null) {
                                    oneVisibleRecaptchaClientKey = i;
                                    break
                                } else {
                                    oneVisibleRecaptchaClientKey = null;
                                    break visible_recaptcha_element_search_loop
                                }
                            }
                        }
                    }
                }
                if (oneVisibleRecaptchaClientKey !== null) {
                    recursiveCallbackSearch(___grecaptcha_cfg.clients[oneVisibleRecaptchaClientKey], taskSolution, 1, 2)
                }
            }
        }
    } + ')("' + taskSolution + '");';
    var script = document.createElement("script");
    script.textContent = injectedCode;
    //console.log(injectedCode);
    (document.head || document.documentElement).appendChild(script);
    script.remove();
}

function setupMessageBox() {
    let image = '<img src="' + chrome.extension.getURL('./icons/icon.png') + '" align="left" style="margin-right: 4px;" />';
    message.innerHTML = "<b>Solving captcha...</b>";
    let container = document.createElement('div');
    container.className = 'ReCaptcha_solver';
    container.innerHTML = image;
    container.appendChild(message);
    container.style.backgroundColor = "#F9F9F9";
    container.style.border = "1px solid #D3D3D3";
    container.style.borderTop = "none";
    container.style.borderRadius = "0 0 3px 3px";
    container.style.padding = "5px";
    container.style.boxSizing = "border-box"
    container.style.width = "302px";
    container.style.margin = "-4px 2px 0 0";

    insertAfter(container, afterElement);
    // afterElement.appendChild(message);
}
function sendMessage(str){
    message.innerHTML = str;
}

function startWatching_captchaguru(code, key) {
    let initial = 7000, repeat = 5000;
    setTimeout(function() {
        checkCompletion_captchaguru(code, key, repeat);
    }, initial);
}

function makeRequest_captchaguru(result){
    sendMessage("<b>Xử Lý Bởi Captcha.Guru ...</b>");
    let key = result.apiKey;
    let url = `http://api.captcha.guru/in.php?key=${key}&googlekey=${id}&method=userrecaptcha&pageurl=${pageurl}&vendor_id=3`;
    chrome.runtime.sendMessage({
        method: 'POST',
        action: 'xhttp',
        url: url,
        data: ''
    }, function(responseText) {

        if(responseText.includes('OK|')==false){
            sendMessage("<b>"+responseText+"</b>")
            setTimeout(start_solve, 2000);
            //loi cap -- xu ly -------------------------------
        }else{
            //////console.log(responseText.substring(3));
            startWatching_captchaguru(responseText.substring(3), key);
        }


    });


}

function onGotauto(item){
    auto_submit=item.Auto;

}
function onGotAutoClick(item){
    auto_click=item.AutoClick;

}

function delete_div(){

}
function try_solve(){
    var actualCode = '(' + function() {
        let isRecaptchaFrame = () => {
            return /https:\/\/www.google.com\/recaptcha\/api2\/anchor/.test(window.location.href);
        };

        let captchaInterval = setInterval(() => {
            if (isRecaptchaFrame()) {
                clearInterval(captchaInterval);
                document.getElementsByClassName('recaptcha-checkbox-checkmark')[0].click();
            }
        }, 500);

    } + ')();';
    var script = document.createElement('script');
    script.textContent = actualCode;
    (document.head||document.documentElement).appendChild(script);
    script.remove();

}

function start_solve(){
    //delete_div();
    let checkId = setInterval(function() {
        var frames = document.getElementsByTagName("iframe");
        for(let i = 0; i < frames.length; i++){
            var src = frames[i].getAttribute('src');
            if(src != null && src.startsWith("https://www.google.com/recaptcha/api2/bframe") && frames[i].parentNode.parentNode.style.visibility != "hidden"){
                //frames[i].parentNode.remove();
                for(let i = 0; i < frames.length; i++){
                    if(frames[i].offsetParent!=null)
                    {
                        let src = frames[i].getAttribute('src');
                        if(src != null && src.startsWith("https://www.google.com/recaptcha") ){
                            id = getParameterByName("k", src);
                            if(id != "" && id != null ){
                                afterElement = frames[i];
                                break;
                            }
                        }
                    }
                }
                if(id != "" && id != null ){

                    clearInterval(checkId);
                    setupMessageBox();
                    chrome.storage.sync.get("apiKey",makeRequest_captchaguru);
                    //////console.log(id);
                }
                break;
            }
        }


    }, 1000);

}

async function delay(delayInms) {
    return new Promise(resolve  => {
        setTimeout(() => {
            resolve(2);
        }, delayInms);
    });
}

chrome.storage.sync.get("isEnabled",function(result) {
    if(result.isEnabled){
        chrome.storage.sync.get("Auto",onGotauto);
        chrome.storage.sync.get("AutoClick",function(result){
            if(result.AutoClick){
                try_solve();
                async function sample(){
                    let delayres = await delay(5000);
                    if(document.getElementById('solved')==null){
                        setTimeout(start_solve, 4000);
                    }
                    else{
                        if(auto_submit==true){
                            var afterElement;
                            let frames = document.getElementsByTagName("iframe");
                            for(let i = 0; i < frames.length; i++){
                                if(frames[i].offsetParent!=null){
                                    let src = frames[i].getAttribute('src');
                                    if(src != null && src.startsWith("https://www.google.com/recaptcha")){
                                        id = getParameterByName("k", src);
                                        if(id != "" && id != null){
                                            afterElement = frames[i];
                                            break;
                                        }
                                    }
                                }
                            }
                            afterElement.closest('form').submit();
                        }
                    }
                }
                sample();
            }
            else{
                setTimeout(start_solve, 4000);
            }
        });
    }
});
